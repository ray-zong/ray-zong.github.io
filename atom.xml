<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>平凡人生</title>
  
  <subtitle>An ordinary life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.itrayweb.com/"/>
  <updated>2017-12-07T10:51:19.773Z</updated>
  <id>http://www.itrayweb.com/</id>
  
  <author>
    <name>Ray</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo博客中插入图片、音乐</title>
    <link href="http://www.itrayweb.com/2017/12/06/hexo/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E3%80%81%E9%9F%B3%E4%B9%90/"/>
    <id>http://www.itrayweb.com/2017/12/06/hexo/hexo博客中插入图片、音乐/</id>
    <published>2017-12-06T03:04:00.000Z</published>
    <updated>2017-12-07T10:51:19.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>1.安装插件(管理员权限),打开命令终端，输入命令：<code>npm install hexo-asset-image –-save</code>；<br>2.打开hexo初始化目录下的<strong> _config.yml </strong> ，查找到关键字<strong> post_asset_folder </strong>，将其默认值<strong> false </strong>更改为<strong> true </strong> (注意空格)。</p><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li>新建博客，输入命令：<code>Hexo new image</code>（在/source/_posts目录下生成<strong> image.md </strong>和<strong> image文件夹 </strong>。</li><li>在<strong> image文件夹 </strong>下放入一张图片，如：1.jpg。</li><li>打开<strong> image.md </strong>文档，在正文输入图片<code>![This is example](image/1.jpg)</code>**</li><li>上面插入的是本地图片，还可以插入网络图片，如<code>![The picture comes from the network.](http://img07.tooopen.com/images/20170309/tooopen_sy_201188749612.jpg)</code><blockquote><p>插入图片的语法：<br><code>![图片描述（可省略）](/文件夹名/图片名称)</code></p></blockquote></li></ul><h2 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h2><p>插入网易云音乐的歌曲链接，浏览器中打开<a href="http://music.163.com/" target="_blank" rel="noopener">网易云音乐</a>,点击需要插入的歌曲(如：成都)，点击左侧“生成外链播放器”，调整属性值。复制HTML代码，粘贴到博客的相应位置即可。</p><p><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=436514312&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</code></p><p><img src="/2017/12/06/hexo/hexo博客中插入图片、音乐/1.png" alt=""></p><p><img src="/2017/12/06/hexo/hexo博客中插入图片、音乐/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;插入图片&quot;&gt;&lt;a href=&quot;#插入图片&quot; class=&quot;headerlink&quot; title=&quot;插入图片&quot;&gt;&lt;/a&gt;插入图片&lt;/h2&gt;&lt;p&gt;1.安装插件(管理员权限),打开命令终端，输入命令：&lt;code&gt;npm install hexo-asset-image –-save&lt;/code&gt;；&lt;br&gt;2.打开hexo初始化目录下的&lt;strong&gt; _config.yml &lt;/strong&gt; ，查找到关键字&lt;strong&gt; post_asset_folder &lt;/strong&gt;，将其默认值&lt;strong&gt; false &lt;/strong&gt;更改为&lt;strong&gt; true &lt;/strong&gt; (注意空格)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网站博客" scheme="http://www.itrayweb.com/tags/%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>hexo插件:百度、谷歌搜索引擎站点收录</title>
    <link href="http://www.itrayweb.com/2017/12/06/hexo/hexo%E6%8F%92%E4%BB%B6-%E7%99%BE%E5%BA%A6%E3%80%81%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/"/>
    <id>http://www.itrayweb.com/2017/12/06/hexo/hexo插件-百度、谷歌搜索引擎站点收录/</id>
    <published>2017-12-06T03:00:38.000Z</published>
    <updated>2017-12-07T10:51:19.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>1.启动命令终端，依次输入下列命令：<br><code>npm install hexo-generator-sitemap --save</code><br><code>npm install hexo-generator-baidu-sitemap --save</code></p><a id="more"></a><p>2.运行命令hexo g后，会在public目录下生成sitemap.xml、baidusitemap.xml</p><h2 id="百度、谷歌注册网站"><a href="#百度、谷歌注册网站" class="headerlink" title="百度、谷歌注册网站"></a>百度、谷歌注册网站</h2><p><a href="https://ziyuan.baidu.com/dashboard/index" target="_blank" rel="noopener">百度站点平台</a></p><p><a href="https://www.google.com/webmasters/tools" target="_blank" rel="noopener">谷歌站点平台</a></p><blockquote><p><strong> 注意 </strong> 插件安装必须有系统管理员权限，即运行终端时，鼠标右击，点选【以管理员身份运行】。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;插件安装&quot;&gt;&lt;a href=&quot;#插件安装&quot; class=&quot;headerlink&quot; title=&quot;插件安装&quot;&gt;&lt;/a&gt;插件安装&lt;/h2&gt;&lt;p&gt;1.启动命令终端，依次输入下列命令：&lt;br&gt;&lt;code&gt;npm install hexo-generator-sitemap --save&lt;/code&gt;&lt;br&gt;&lt;code&gt;npm install hexo-generator-baidu-sitemap --save&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="网站博客" scheme="http://www.itrayweb.com/tags/%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>hexo插件:RSS订阅</title>
    <link href="http://www.itrayweb.com/2017/12/06/hexo/hexo%E6%8F%92%E4%BB%B6-RSS%E8%AE%A2%E9%98%85/"/>
    <id>http://www.itrayweb.com/2017/12/06/hexo/hexo插件-RSS订阅/</id>
    <published>2017-12-06T02:56:14.000Z</published>
    <updated>2017-12-07T10:51:19.777Z</updated>
    
    <content type="html"><![CDATA[<p>RSS订阅插件<br><code>npm install hexo-generator-feed --save</code></p><a id="more"></a><blockquote><p><strong> 注意 </strong> 插件安装必须有系统管理员权限，即运行终端时，鼠标右击，点选【以管理员身份运行】。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RSS订阅插件&lt;br&gt;&lt;code&gt;npm install hexo-generator-feed --save&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="网站博客" scheme="http://www.itrayweb.com/tags/%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之命令模式Command</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8FCommand/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之命令模式Command/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.784Z</updated>
    
    <content type="html"><![CDATA[<p>将一种请求封装成对象。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICommand</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">switch</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ICommand _closedCommand;</span><br><span class="line">ICommand _openedCommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Switch(ICommand* closedCommand, ICommand* openedCommand)</span><br><span class="line">&#123;</span><br><span class="line">_closedCommand = closeCommand;</span><br><span class="line">_openedCommand = openedCommand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// close the circuit/power on</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_closedCommand-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// open the circuit/power off_type</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_openedCommand-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISwitchable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Light</span> :</span> <span class="keyword">public</span> ISwitchable</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The light is on."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The light is off."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The Command for truning on the device - concreteCommand</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloseSwitchCommand</span> :</span> <span class="keyword">public</span> ICommand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ISwitchable _switchable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CloseSwitchCommand</span><span class="params">(ISwitchable* switchable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_switchable = switchable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_switchable-&gt;powerOn();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The command for turning off the device - concreteCommand</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenSwitchCommand</span> :</span> <span class="keyword">public</span> ICommand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ISwitchable _switchable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">OpenSwitchCommand(ISwitchabel* switchable)</span><br><span class="line">&#123;</span><br><span class="line">_switchable = switchable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_switchable-&gt;powerOff();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> argument = argc &gt; <span class="number">1</span> ? toUpper(argv[<span class="number">1</span>]) : <span class="built_in">string</span>();</span><br><span class="line">ISwitchable* lamp = <span class="keyword">new</span> Ligth();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Pass reference to the lamp instance to each command</span></span><br><span class="line">ICommand* switchClose = <span class="keyword">new</span> CloseSwitchCommand(lamp);</span><br><span class="line">ICommand* switchOpen = <span class="keyword">new</span> OpenSwitchCommand(lamp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Pass reference to instances of the Command objects to the switch</span></span><br><span class="line">Switch* pSwitch = <span class="keyword">new</span> Switch(switchClose, switchOpen);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(argument == <span class="string">"ON"</span>)</span><br><span class="line">&#123;</span><br><span class="line">pSwitch-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(argument == <span class="string">"OFF"</span>)</span><br><span class="line">&#123;</span><br><span class="line">pSwitch-&gt;open();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Argument \"ON\" or \"OFF\" is required."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将一种请求封装成对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰模式Decorator</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8FDecorator/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之装饰模式Decorator/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.788Z</updated>
    
    <content type="html"><![CDATA[<p>动态地给一个对象扩展功能，而不是通过子类继承。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The Window interface class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Draws the Window</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//Returns a description of the Window</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Implementation of a simple Window without any scrollbars</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleWindow</span> :</span> <span class="keyword">public</span> Window</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Draw window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"simple window"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//abstract decorator class - note that it implements window</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowDecorator</span> :</span> <span class="keyword">public</span> Window</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Window* _windowToBeDecorated; <span class="comment">//the window being decorated</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">WindowDecorator(Window* windowToBeDecorated)</span><br><span class="line">&#123;</span><br><span class="line">_windowToBeDecorated = windowToBeDecorated;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_windowToBeDecorated-&gt;draw(); <span class="comment">//Delegation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _windowToBeDecorated-&gt;getDescription(); <span class="comment">//Delegation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The first concrete decorator which adds vertical scrollbar functionality</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerticalScrollBarDecorator</span> :</span> <span class="keyword">public</span> WindowDecorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">VerticalScrollBarDecorator(Window* windowToBeDecorated)</span><br><span class="line">: WindowDecorator(windowToBeDecorated)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WindowDecorator::draw();</span><br><span class="line">drawVerticalScrollBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> WindowDecorator::getDescription() + <span class="string">", including vertical scrollbars"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawVerticalScrollBar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Draw the vertical scrollbar</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//The second concrete decorator which adds horizontal scrollbar functionality</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HorizontalScrollBarDecorator</span> :</span> <span class="keyword">public</span>  WindowDecorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">HorizontalScrollBarDecorator(Window* windowToBeDecorated)</span><br><span class="line">: WindowDecorator(windowToBeDecorated)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WindowDecorator::draw();</span><br><span class="line">drawHorizontalScrollBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> WindowDecorator::getDescription() + <span class="string">", including horizontal scrollbars"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawHorizontalScrollBar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Draw the horizontal scrollbar</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//create a decorated window with horizontal and vertical scrollbars.</span></span><br><span class="line">Window* decoratedWindow = <span class="keyword">new</span> HorizontalScrollBarDecorator(<span class="keyword">new</span> VerticalScrollBarDecorator(<span class="keyword">new</span> SimpleWindow));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Print the window's description</span></span><br><span class="line">decoratedWindow-&gt;getDescription();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态地给一个对象扩展功能，而不是通过子类继承。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式Observer</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8FObserver/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之观察者模式Observer/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.788Z</updated>
    
    <content type="html"><![CDATA[<p>定义一个管理类(观察者)，负责管理其他对某类状态感兴趣的对象(需注册及注销)。</p><a id="more"></a><p>代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Observer *obs : _observers)</span><br><span class="line">&#123;</span><br><span class="line">obs-&gt;update();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">List&lt;Observer *&gt; _observers;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverA</span> :</span> <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Subject client;</span><br><span class="line"></span><br><span class="line">Observer *obs = <span class="keyword">new</span> ObserverA;</span><br><span class="line">client.attach(obs);</span><br><span class="line"></span><br><span class="line">client.notify();</span><br><span class="line"></span><br><span class="line">client.detach(obs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义一个管理类(观察者)，负责管理其他对某类状态感兴趣的对象(需注册及注销)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之组合模式Composite</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8FComposite/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之组合模式Composite/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.788Z</updated>
    
    <content type="html"><![CDATA[<p>采用树形结构表示“部分-整体”关系，类用户使用一致的方式对待单个对象和组合对象。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graphic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//prints the graphic</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Composite</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompositeGraphic</span> :</span> <span class="keyword">public</span> Graphic</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">List&lt;Graphic*&gt; childGraphics;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Graphic *graphic : childGraphics)</span><br><span class="line">&#123;graphic-&gt;print();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adds the graphic to the composition.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Graphic *graphic)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">childGraphics.add(graphic);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Removes the graphic from the composition.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Graphic *graphic)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">childGraphics.remove(graphic);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Leaf</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ellipse</span> :</span> <span class="keyword">public</span> Graphic</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Prints the graphic.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Ellipse"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Initialize four ellipses</span></span><br><span class="line">Ellipse *ellipse1 = <span class="keyword">new</span> Ellipse();</span><br><span class="line">Ellipse *ellipse2 = <span class="keyword">new</span> Ellipse();</span><br><span class="line">Ellipse *ellipse3 = <span class="keyword">new</span> Ellipse();</span><br><span class="line">Ellipse *ellipse4 = <span class="keyword">new</span> Ellipse();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Initialize four composite graphics</span></span><br><span class="line">CompositeGraphic *graphic = <span class="keyword">new</span> CompositeGraphic();</span><br><span class="line">CompositeGraphic *graphic1 = <span class="keyword">new</span> CompositeGraphic();</span><br><span class="line">CompositeGraphic *graphic2 = <span class="keyword">new</span> CompositeGraphic();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Composes the graphics</span></span><br><span class="line">graphic1-&gt;add(ellipse1);</span><br><span class="line">graphic1-&gt;add(ellipse2);</span><br><span class="line">graphic1-&gt;add(ellipse3);</span><br><span class="line"></span><br><span class="line">graphic2-&gt;add(ellipse4);</span><br><span class="line"></span><br><span class="line">graphic-&gt;add(graphic1);</span><br><span class="line">graphic-&gt;add(graphic2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Prints the complete graphic (four times the string "Ellipse").</span></span><br><span class="line">graphic-&gt;print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;采用树形结构表示“部分-整体”关系，类用户使用一致的方式对待单个对象和组合对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式Strategy</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FStrategy/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之策略模式Strategy/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.787Z</updated>
    
    <content type="html"><![CDATA[<p>封装不同的算法，使其独立于对象改变。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICalculate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Minus</span> :</span> <span class="keyword">public</span> ICalculate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value1 - value2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plus</span> :</span> <span class="keyword">public</span> ICalculate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculateClient</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ICalculate* _strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CalculateClient(ICalculate* strategy)</span><br><span class="line">: _strategy(strategy)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~CalculateClient()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(_strategy != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _strategy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(ICalculate* strategy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(_strategy != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(_strategy != <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">return</span> _strategy-&gt;calculate(value1, value2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CalculateClient* client = <span class="keyword">new</span> CalculateClient(<span class="keyword">new</span> Minus);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Minus: "</span> &lt;&lt; client-&gt;calculate(<span class="number">7</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//change the strategy</span></span><br><span class="line">client-&gt;setStrategy(<span class="keyword">new</span> plus);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Plus: "</span> &lt;&lt; client-&gt;calculate(<span class="number">7</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;封装不同的算法，使其独立于对象改变。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式State</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8FState/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之状态模式State/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.787Z</updated>
    
    <content type="html"><![CDATA[<p>定义状态量与行为的对应，当状态改变时，类对象的行为随着改变。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Statelike</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">writeName</span><span class="params">(StateContext context, <span class="built_in">string</span> name)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateLowerCase</span> :</span> <span class="keyword">public</span> Statelike</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">writeName</span><span class="params">(StateContext context, <span class="built_in">string</span> name)</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name.toLowerCase() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">context.setState(<span class="keyword">new</span> StateMultipleUpperCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMultipleUpperCase</span> :</span> <span class="keyword">public</span> Statelike</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">writeName</span><span class="params">(StateContext context, <span class="built_in">string</span> name)</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name.toUpperCase() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(++count &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">context.setState(<span class="keyword">new</span> StateLowerCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateContext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Statelike myState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">StateContext()</span><br><span class="line">&#123;</span><br><span class="line">setState(<span class="keyword">new</span> StateLowerCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setState</span><span class="params">(Statelike newState)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">myState = newState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeName</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">myState.writeName(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StateContext* sc = <span class="keyword">new</span> StateContext;</span><br><span class="line"></span><br><span class="line">sc-&gt;writeName(<span class="string">"Monday"</span>);</span><br><span class="line">　　　　sc-&gt;writeName(<span class="string">"Tuesday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Wednesday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Thursday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Friday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Saturday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Sunday"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义状态量与行为的对应，当状态改变时，类对象的行为随着改变。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之备忘录模式Memento</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8FMemento/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之备忘录模式Memento/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.784Z</updated>
    
    <content type="html"><![CDATA[<p>保存一个对象的内部状态，在对象改变后，可以恢复到原先保存的状态。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> _state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_state = state;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Originator:Setting state to "</span> &lt;&lt; _state &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Memento* <span class="title">saveToMemento</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Originator:Saving to Memento."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Memento(_state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">restoreFromMemmento</span><span class="params">(<span class="keyword">const</span> Memento* memento)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_state = memento-&gt;getSavedState();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Originator:State after restoring from memento:"</span> &lt;&lt; _state &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> _state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Memento(<span class="keyword">const</span> <span class="built_in">string</span> &amp;state)</span><br><span class="line">&#123;</span><br><span class="line">_state = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getSavedState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Originator org;</span><br><span class="line">org.<span class="built_in">set</span>(<span class="string">"state1"</span>);</span><br><span class="line">org.<span class="built_in">set</span>(<span class="string">"state2"</span>);</span><br><span class="line"></span><br><span class="line">Memento *mem = org.saveToMemento();</span><br><span class="line"></span><br><span class="line">org.<span class="built_in">set</span>(<span class="string">"state3"</span>);</span><br><span class="line"></span><br><span class="line">org.restoreFromMemento(mem);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> mem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;保存一个对象的内部状态，在对象改变后，可以恢复到原先保存的状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之责任链模式Chain of Responsibility</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8FChain%20of%20Responsibility/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之责任链模式Chain of Responsibility/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.789Z</updated>
    
    <content type="html"><![CDATA[<p>将一种响应（请求）通过一条彼此关联的处理类处理。一般遵照由小到大的粒度。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchasePower</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">static</span> final <span class="keyword">double</span> _BASE = <span class="number">500</span>;</span><br><span class="line">PurchasePower* _successor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(PurchasePower* successor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_successor = successor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest* request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(reuqest-&gt;getAmount() &lt; getAllowable() )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getRole() &lt;&lt; <span class="string">"will approve $"</span> + request-&gt;getAmount() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(_successor != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_successor-&gt;processRequest(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerPPower</span> :</span> <span class="keyword">public</span> PurchasePower</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _BASE * <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Manager"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectorPPower</span> :</span> <span class="keyword">public</span> PurchasePower</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _BASE * <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Director"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VicePresidentPPower</span> :</span> <span class="keyword">public</span> PurchasePower</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _BASE * <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Vice President"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PresidentPPower</span> :</span> <span class="keyword">public</span> PurchasePower</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _BASE * <span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"President"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseRequest</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> _amount;</span><br><span class="line"><span class="built_in">string</span> _purpose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">PurchaseRequest(<span class="keyword">double</span> amount, <span class="built_in">string</span> purpose)</span><br><span class="line">&#123;</span><br><span class="line">_amount = amount;</span><br><span class="line">_purpose = purpose;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _amount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_amount = amount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getPurpose</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _purpose;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPurpose</span><span class="params">(<span class="built_in">string</span> purpose)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_purpose = purpose;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ManagerPPower* manager = <span class="keyword">new</span> ManagerPPower();</span><br><span class="line">DirectorPPower* director = <span class="keyword">new</span> DirectorPPower();</span><br><span class="line">VicePresidentPPower* vp = <span class="keyword">new</span> VicePresidentPPower();</span><br><span class="line">PresidentPPower* president = <span class="keyword">new</span> PresidentPPower();</span><br><span class="line"></span><br><span class="line">manager-&gt;setSuccessor(director);</span><br><span class="line">director-&gt;setSuccessor(vp);</span><br><span class="line">vp-&gt;setSuccessor(president);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter the amount to check who should approve your expenditure."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">manager-&gt;processRequest(<span class="keyword">new</span> PurchaseRequest(d, <span class="string">"General"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>典型的例子：界面帮助请求</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将一种响应（请求）通过一条彼此关联的处理类处理。一般遵照由小到大的粒度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之访问者模式Visitor</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8FVisitor/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之访问者模式Visitor/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.789Z</updated>
    
    <content type="html"><![CDATA[<p>从对象结构中分离独立的算法(逻辑操作)，实现修改算法(逻辑操作)时，不改变对象结构。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeVisitor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitAssignment</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitVariableRefNode</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeCheckingVisitor</span> :</span> <span class="keyword">public</span> NodeVisitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitAssignment</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitVariableRefNode</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeGeneratingVisitor</span> :</span> <span class="keyword">public</span> NodeVisitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitAssignment</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitVariableRefNode</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(NodeVisitor)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssignmentNode</span> :</span> <span class="keyword">public</span> Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(NodeVisitor v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v-&gt;visitAssignment(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableRefNode</span> :</span> <span class="keyword">public</span> Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(NodeVisitor v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v-&gt;visitVariableRef(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从对象结构中分离独立的算法(逻辑操作)，实现修改算法(逻辑操作)时，不改变对象结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式Adapter</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8FAdapter/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之适配器模式Adapter/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.789Z</updated>
    
    <content type="html"><![CDATA[<p>将一个类接口封装成另一类接口。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpecificRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;Adaptee::SpecificRequest();&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>1.底层模块为上层模块提供接口，当底层模块改变时，不希望重新定义上层模块，在中间添加一层Adapter模块进行对接；</p><p>2.不同的类适配到一个算法，例如：iterater</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将一个类接口封装成另一类接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法Template Method</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95Template%20Method/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之模板方法Template Method/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.786Z</updated>
    
    <content type="html"><![CDATA[<p>在基类中定义一套算法框架，子类只能更改特定的实现细节。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">function1();</span><br><span class="line">function2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"invoke the function1 of AbstractClass"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"invoke the function2 of AbstractClass"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass1</span> :</span> <span class="keyword">public</span> AbstractClass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"invoke the function1 of SubClass1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在基类中定义一套算法框架，子类只能更改特定的实现细节。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥接模式Bridge</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8FBridge/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之桥接模式Bridge/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.786Z</updated>
    
    <content type="html"><![CDATA[<p>解耦，抽象接口与实现分离。</p><a id="more"></a><p>代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IAbstractBridge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CallMethod1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CallMethod2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractBridge</span> :</span> <span class="keyword">public</span> IAbstractBridge</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">AbstractBridge(IBridge *bridge)</span><br><span class="line">&#123;</span><br><span class="line">_bridge = bridge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallMethod1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;_bridge-&gt;Function1();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallMethod2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;_bridge-&gt;Function2();&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IBridge *_bridge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IBridge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Function1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Function2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge1</span> :</span> <span class="keyword">public</span> IBridge</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bridge1.Function1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bridge1.Funciton2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge2</span> :</span> <span class="keyword">public</span> IBridge</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bridge2.Function1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bridge2.Funciton2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解耦，抽象接口与实现分离。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之构建模式Builder</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%BC%8FBuilder/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之构建模式Builder/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.786Z</updated>
    
    <content type="html"><![CDATA[<p>构建与实现（样式、表示）分离，一个构建逻辑对应不同的实现（样式、表示）。</p><a id="more"></a><p>代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartC</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product1</span> :</span> <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part A of the Product1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part B of the Product1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part C of the Product1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product2</span>:</span> <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part A of the Product2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part B of the Product2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part C of the Product2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;构建与实现（样式、表示）分离，一个构建逻辑对应不同的实现（样式、表示）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之抽象工厂模式Abstract Factory</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82Abstract%20Factory/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之抽象工厂Abstract Factory/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.785Z</updated>
    
    <content type="html"><![CDATA[<p>定义</p><p>抽象工厂模式是一系列相关的接口(工厂组成)封装成一个Factory。类用户在使用时，不需要关系具体Factory的实现，仅通过调用统一的Abstract Factory对象接口。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OSFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">createMenu</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">createBarTool</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MSFactory</span> :</span> <span class="keyword">public</span> OSFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">createMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">createBarTool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacFactory</span> :</span> <span class="keyword">public</span> OSFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">createMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">createBarTool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line">Enum System&#123;Windows,Mac&#125;;</span><br><span class="line"><span class="function">OSFactory *<span class="title">createFactory</span><span class="params">(System sys)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(sys)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> Windows:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MSFactory;</span><br><span class="line">        <span class="keyword">case</span> Mac:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MacFactory;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">OSFactory *pAbstractFac = createFactory(Windows);</span><br><span class="line">pAbstractFac-&gt;createMenu();</span><br><span class="line">pAbstractFac-&gt;createBarTool();</span><br></pre></td></tr></table></figure></p><p>适用范围：</p><p>1.一个系统要独立于它的产品的创建、组合和表示时</p><p>2.一个系统要由多个产品系列中的一个来配置时</p><p>3.强调一系列相关的产品对象的设计以便进行联合使用时</p><p>4.提供一个产品类库，而只想显示它们的接口而不是实现时</p><p>优点：</p><p>1.分离抽象接口和具体实现类</p><p>2.易于交互产品系列</p><p>3.利于产品的一致性</p><p>缺点：</p><p>1.不容易支持新的产品，需要修改抽象工厂的接口</p><p>扩展</p><p>单例模式、工厂方法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义&lt;/p&gt;
&lt;p&gt;抽象工厂模式是一系列相关的接口(工厂组成)封装成一个Factory。类用户在使用时，不需要关系具体Factory的实现，仅通过调用统一的Abstract Factory对象接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂方法Factory Method</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95Factory%20Method/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之工厂方法Factory Method/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.785Z</updated>
    
    <content type="html"><![CDATA[<p>定义一个单一创建接口，让子类实现不同对象的创建。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//interface</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interface</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product *<span class="title">createProduct</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">//factory method</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product1</span></span></span><br><span class="line"><span class="class">&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator1</span> :</span> <span class="keyword">public</span> Creator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product *<span class="title">createProduct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Product1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义一个单一创建接口，让子类实现不同对象的创建。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之中介者模式Mediator</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8FMediator/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之中介者模式Mediator/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.781Z</updated>
    
    <content type="html"><![CDATA[<p>将不同的对象间交互封装到一个对象中，类似黑板或者交互平台。</p><a id="more"></a><p>代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DialogDirector</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~DialogDirector();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">showDialog</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">widgetChanged</span><span class="params">(Widget*)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">DialogDirector();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">createWidgets</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Widget(DialogDirector*);</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_director-&gt;widgetChanged(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handleMouse</span><span class="params">(MouseEvent&amp; event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">DialogDirector* _director;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListBox</span> :</span> <span class="keyword">public</span> Widget&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ListBox(DialogDirector*);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">getSelection</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;<span class="keyword">char</span>*&gt;* listItems)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handleMouse</span><span class="params">(MouseEvent&amp; event)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryField</span> :</span> <span class="keyword">public</span> Widget&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">EntryField(DialogDirector*);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* text)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">getText</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handleMouse</span><span class="params">(MouseEvent&amp; event)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> :</span> <span class="keyword">public</span> Widget&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Button(DialogDirector*);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* text)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handleMouse</span><span class="params">(MouseEvent&amp; event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">changed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FontDialogDirector</span> :</span> <span class="keyword">public</span> DialogDirector&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">FontDialogDirector();</span><br><span class="line"><span class="keyword">virtual</span> ~FontDialogDirector();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">widgetChanged</span><span class="params">(Widget* theChangedWidget)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(theChangedWidget == _fontList)</span><br><span class="line">&#123;</span><br><span class="line">_fontName-&gt;setText(_fontList-&gt;getSelection());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(theChangedWidget == _ok)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//apply font change and dismiss dialog</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(theChangedWidget == _cancel)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//dismiss dialog</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">virtual</span> <span class="keyword">void</span> createWidget()</span><br><span class="line">&#123;</span><br><span class="line">_ok = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</span><br><span class="line">_cancel = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</span><br><span class="line">_fontList = <span class="keyword">new</span> ListBox(<span class="keyword">this</span>);</span><br><span class="line">_fontName = <span class="keyword">new</span> EntryField(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Button* _ok;</span><br><span class="line">Button* _cancel;</span><br><span class="line">ListBox* _fontList;</span><br><span class="line">EntryField* _fontName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将不同的对象间交互封装到一个对象中，类似黑板或者交互平台。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式Flyweight</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8FFlyweight/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之享元模式Flyweight/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.782Z</updated>
    
    <content type="html"><![CDATA[<p>共享大量的细粒度对象。</p><a id="more"></a><p>适宜处理的问题：</p><p>1.高效的支持大量的对象；</p><p>2.避免创建大量的对象。</p><p>示例：</p><p>文本编辑器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;共享大量的细粒度对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
