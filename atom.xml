<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>平凡人生</title>
  
  <subtitle>An ordinary life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.itrayweb.com/"/>
  <updated>2018-04-12T06:01:21.019Z</updated>
  <id>http://www.itrayweb.com/</id>
  
  <author>
    <name>Ray</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>system()函数危害</title>
    <link href="http://www.itrayweb.com/2018/01/24/C++/system()%E5%87%BD%E6%95%B0%E5%8D%B1%E5%AE%B3/"/>
    <id>http://www.itrayweb.com/2018/01/24/C++/system()函数危害/</id>
    <published>2018-01-23T16:00:00.000Z</published>
    <updated>2018-04-12T06:01:21.019Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.cplusplus.com/articles/j3wTURfi/" target="_blank" rel="noopener">http://www.cplusplus.com/articles/j3wTURfi/</a></p><a id="more"></a><p>占用资源多</p><p>首先，你必须思考system()函数真正做什么：它不止运行一个进程，而是两个独立的进程以及返回一个退出的状态量给调用程序(系统主程序依据退出状态量判断调用是否成功).<br><a href="https://linux.die.net/man/3/system" target="_blank" rel="noopener">system函数手册</a>详细描述system()函数的调用及返回值，少量资源存储错误状态。</p><p>system(“PAUSE”)仅仅是简单地等待终端输入，但是，却需要做许多工作。参见：<a href="http://www.gidnetwork.com/b-61.html" target="_blank" rel="noopener">http://www.gidnetwork.com/b-61.html</a></p><p>安全性差</p><p>使用system()函数，可能出现下列问题：<br>1.无效命令；<br>2.不能在所有平台运行；<br>3.无法防止恶意代码；<br>4.是一个独立的程序。</p><p>下列代码是控制台程序：</p><p>#include <stdio.h></stdio.h></p><p>#include <stdlib.h></stdlib.h></p><p>#if defined(WIN32) || defined(_WIN32) || defined(<strong>WIN32</strong>) || defined(<strong>TOS</strong>WIN<strong>) || defined(</strong>WINDOWS__)</p><p>#define EDITOR “notepad”</p><p>#else</p><p>#define EDITOR “emacs”</p><p>#endif</p><p>int main(int argc, char **argv)<br>{<br>    printf(“Now I’m going to start your text editor!\n”);<br>    system(EDITOR);<br>    printf(“Good-bye!\n”);<br>    return 0;<br>}</p><p>Unix/Linux用户可能会遇到下列问题：<br>-系统没有安装emacs。<br>-不知道如何退出emacs。<br>-运行程序前，必须保证emacs的环境变量路径配置正确。</p><p>假设上述程序已经可以正确运行，在相同目录下运行下列代码：</p><p>#include <stdio.h></stdio.h></p><p>int main(int argc,char ** argv)<br>{<br>    printf(“Bwah, hah, hah, hah, hah!\n”);<br>    return 0;<br>}</p><p>编译代码，并将其更改为”notepad.exe”或者”emacs”。</p><p>现在再次运行程序，会发生什么现象？</p><p>更加危险的是你有可能以管理员权限运行程序，这时，system调用的程序也具备管理员权限。</p><p>防病毒软件警告</p><p>如果你的软件用户安装某些防病毒软件，例如ZoneAlarm,Norton,McAfee等。运行软件时，这些防病毒软件可能提示软件有风险。</p><p>综上所述，避免使用system()。</p><p>如果你必须使用system(),建议先检测是否有有效的shell。<br>if(system(NULL)) then_I_can_safely_use_system();<br>else fooey();</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.cplusplus.com/articles/j3wTURfi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cplusplus.com/articles/j3wTURfi/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://www.itrayweb.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>如何使用C++新特性避免错误</title>
    <link href="http://www.itrayweb.com/2018/01/20/C++/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8C++%E6%96%B0%E7%89%B9%E6%80%A7%E9%81%BF%E5%85%8D%E9%94%99%E8%AF%AF/"/>
    <id>http://www.itrayweb.com/2018/01/20/C++/如何使用C++新特性避免错误/</id>
    <published>2018-01-19T16:00:00.000Z</published>
    <updated>2018-04-12T06:01:21.023Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.cplusplus.com/articles/y807M4Gy/" target="_blank" rel="noopener">http://www.cplusplus.com/articles/y807M4Gy/</a></p><p>C++程序最主要的一个问题是有大量未定义的构造器，它会造成许多意想不到的错误。使用静态分析工具有时可以发现极个别的问题。然而，最佳的检测错误的时期在编译阶段。采用现代C++技术，不仅帮助我们写出简洁的代码，而且更加安全可靠。</p><a id="more"></a><p>提及现代C++，人们通常思考的是什么？并行，编译时计算(compile-time calculation)，RAII，lambda表达式，范围(ranges)，concepts,modules以及标准库自带的一些重要组件(例如文件系统API)。这些都是很酷的现代特性，它们有望加入下一代C++标准。然而，我更关注那些可以帮我们写出更安全代码的标准。运行静态分析工具，我们就能发现大量的错误，而不是到编译阶段。但是，现代C++可以帮我们做到。因此，我建议我们可以在开源项目中，利用PVS-Studio检查错误。</p><h2 id="Automatic-type-inference"><a href="#Automatic-type-inference" class="headerlink" title="Automatic type inference"></a>Automatic type inference</h2><p>在C++中，新增关键字auto和decltype。或许，你已经知道如何使用它们。</p><p>std::map<int, int=""> m;<br>auto it = m.find(42);<br>//C++98: std::map<int, int="">::iterator it = m.find(42);</int,></int,></p><p>对于长类型定义，auto是非常方便。然而，这些关键字和模板一起使用，代价是非常昂贵的。不要使用auto和decltype指定返回类型。</p><p>string str = …;<br>unsigned n = str.find(“ABC”);<br>if (n != string::npos)</p><p>在64b程序中，string::npos的值比UINT_MAX大，UINT_MAX是一个unsigned类型。它似乎可以用auto代替。n的类型不重要。实际上，如果我们用auto代替，它会出现错误:</p><p>stirng str = …;<br>auto n = str.find(“ABC”)；<br>if (n != string::npos)</p><p>auto并不是万能灵药。随意使用auto，会造成许多隐患。例如下列代码：</p><p>auto n = 1024 <em> 1024 </em> 1024 <em> 5;<br>char</em> buf = new char[n];</p><p>auto不能保存这么大的数，会造成内存泄漏。</p><p>auto还有造成另一些错误：无效的循环。例如：</p><p>std::vector<int> bigVector;<br>for (unsigned i = 0; i &lt; bigVector.size(); ++i)<br>{…}</int></p><p>对于一个很大的数组,这个循环是无效的。</p><p>我们是否可以用auto代替？</p><p>std::vector<int> bigVector;<br>for (auto i = 0; i &lt; bigVector.size(); ++i)<br>{…}</int></p><p>采用auto,错误不仅仍然存在，甚至变得更加糟糕。</p><p>采用简单类型auto并不好。当然，在一些简单的表达式(auto x = y)，它能正常工作，但是它也有可能带来无法预期的行为。更糟糕的是，它会造成错误更加隐蔽，不易被发现。稍后，我们用提到另一种现代方式来避免这种错误。</p><h2 id="dangerous-countof"><a href="#dangerous-countof" class="headerlink" title="dangerous countof"></a>dangerous countof</h2><p>C++中一种危险的类型是数组。我们经常使用数组作为参数传入函数，程序员忘记它是一个指针，而用sizeof计算它的大小。</p><p>#define RTL_NUMBER_OF_V1(A) (sizeof(A)/sizeof((A)[0]))</p><p>#define _ARRAYSIZE(A) RTL_NUMBER_OF_V1(A)<br>int GetAllNeighbors(const CCoreDispInfo *pDisp,<br>                    int iNeighbors[512])<br>                    {<br>…<br>if(nNeighbors &lt; _ARRAYSIZE(iNeighbors))<br>    iNeighbors[nNeighbors++] = pCorner-&gt;m_Neighbors[i];<br>…<br>                    }</p><p>注：这段代码摘自Source Engine SDK.</p><p>PVS-Studio警告：V511 The sizeof() operator returns size of the pointer, and not of the array, in ‘sizeof (iNeighbors)’ expression. Vrad_dll disp_vrad.cpp 60</p><p>冲突是由于计算参数中的数组大小:此数据对于编译器无用，只是提示程序员。</p><p>麻烦的是这个代码可以编译通过，程序员无法意识到程序有错误。一个有效的解决途径是使用元编程：</p><p>template &lt; class T, size_t N&gt;<br>constexpr size_t countof( const T (&amp;array)[N] )<br>{<br>    return N;<br>}</p><p>countof(iNeighbors); //complite-time error</p><p>如果我们使用countof函数，传递的参数不是数组，编译时会发生错误。在C++17中，我们可以使用std::size.</p><p>在C++11中,新增加函数std::extent,但是它不等价于countof,因为在无效参数时,它返回0.</p><p>使用sizeof和countof都会产生错误。<br>VisitedLinekMaster::TableBuilder::TableBuilder(VisitedLinkMaster* master, const uint8 salt[LINK_SALT<em>LENGTH])<br>:master</em>(master),<br> success<em>(true){<br> fingerprints</em>.reserve(4096);<br> memcpy(salt_, salt, sizeof(salt));<br> }<br>注：这段代码摘自Chromium.</p><p>PVS警告：</p><pre><code>V511 The sizeof() operator returns size of the pointer, and not of the array, in &apos;sizeof (salt)&apos; expression. browser visitedlink_master.cc 968V512 A call of the &apos;memcpy&apos; function will lead to underflow of the buffer &apos;salt_&apos;. browser visitedlink_master.cc 968</code></pre><p>如你所见，标准C++数组有许多问题。这也是为什么提倡使用std::array的原因。现代C++的API跟std::vector等容器的接口类似，使用std::array很难出错。</p><p>void Foo(std::array<uint8, 16=""> array)<br>{<br>array.size();<br>}</uint8,></p><h2 id="for循环避免错误"><a href="#for循环避免错误" class="headerlink" title="for循环避免错误"></a>for循环避免错误</h2><p>许多错误发生在for循环中，这时，你可能回想”我究竟在哪里犯错了？是不是应该增加退出条件或者保存代码行？”不是，错误发生在循环中。看下面的代码：</p><p>const int SerialWindow::kBaudrates[] = {50, 75, 110, …};</p><p>SerialWindow::SerialWindow() : …<br>{<br>…<br>for(int i = sizeof(kBaudrates) / sizeof(char*); –i &gt;= 0;)<br>{<br>message-&gt;AddInt32(“baudrate”, kBaudrateConstants[i]);<br>}<br>…<br>}<br>注：这段代码摘自Haiku Operation System。</p><p>PVS-Studio警告: V706 Suspicious division: sizeof (kBaudrates) / sizeof (char *). Size of every element in ‘kBaudrates’ array does not equal to divisor. SerialWindow.cpp 162</p><p>上一章节我们详细地讨论了这类型错误：数组的大小无法正确计算。使用std::size很容易修复它：</p><p>const int SerialWindow::kBaudrates[] = {50, 75, 110, …};</p><p>SerialWindow::SerialWindow() : …<br>{<br>…<br>for(int i = std::size(kBaudrates); –i &gt;= 0;)<br>{<br>message-&gt;AddInt32(“baudrate”, kBaudrateConstants[i]);<br>…<br>}<br>}<br>下面有一种更好的方式(要求传入数组的大小)：<br>inline void CXmlReader::CXmlInputStream::UnsafePutCharsBack(<br>const TCHAR* pChars, size_t nNumChars)<br>{<br>if(nNumChars &gt; 0)<br>{<br>for(size_t nCharPos = nNumChars - 1; nCharPos &gt;=0; –nCharPos)<br>    UnsafePutCharBack(pChars[nCharPos]);<br>}<br>}<br>注：这段代码摘自Shareaza.<br>PVS-Studio 警告: V547 Expression ‘nCharPos &gt;= 0’ is always true. Unsigned type value is always &gt;= 0. BugTrap xmlreader.h 946</p><p>在这个循环中发生类型错误:程序员忘记unsigned类型的计算方式致使判断始终为真。你可能会想“这个问题怎么会发生？只有新手和学生才会犯这种错误。有经验的不会这么做。”不幸的是，这确实无法避免。当然，大家都明白unsigned &gt;= 0始终为真。这类错误还会在哪出现？它们也会发生在代码重构阶段。试想一个项目需要从32b平台移植到64b。原先，int/unsigned作为索引类型；现在准备使用size_t/ptrdiff_t替换该类型。这样就会造成无符号型替换有符号型。</p><p>在我们的代码中，如何避免此类问题的出现？有人建议在C#或者Qt中，采用有符号类型。或许，它是一种解决办法，但是如果我们想使用更大的数据，无法避免不采用size_t.在C++中，是否有更安全的方式呢？当然有，无成员函数。这是容器数组和初始化列表的标准函数；是C++的一类常用规范。</p><p>char buf[4] = {‘a’, ‘b’, ‘c’, ‘d’};<br>for (auto it = rbegin(buf); it != rend(buf); ++it)<br>{<br>std::cout &lt;&lt; *ite;<br>}</p><p>现在，我们不需要考虑顺序和反序的差异。我们只关注是否使用简单数组或者循环数组。采用iterator是避免此类问题更好的解决方案。但是，是否存在更好的解决方案呢？使用range-based进行循环。</p><p>char buf[4] = {‘a’, ‘b’, ‘c’, ‘d’};<br>for(auto it : buf)<br>{<br>std:cout &lt;&lt; it;<br>}</p><p>当然，在range-based for循环中有些缺陷：它不支持可变数组循环，而且，当要求更复杂的索引时，它也无法使用。但是，这类情形可以单独处理。我们会遇到这种情况：我们必须在一个反序遍历过程中移动某些满足条件的数据，标准库中没有提供额外的类来使用range-based for循环。下列代码展现如何实现：</p><p>template <typename t=""><br>struct reversed_wrapper {</typename></p><pre><code>const T&amp; _v;reversed_wrapper (const T&amp; v) : _v(v) {}auto begin() -&gt; decltype(rbegin(_v)){    return rbegin(_v);}auto end() -&gt; decltype(rend(_v)){    return rend(_v);}</code></pre><p>};</p><p>template <typename t=""><br>reversed_wrapper<t> reversed(const T&amp; v)<br>{<br>    return reversed_wrapper<t>(v);<br>}</t></t></typename></p><p>在C++14中，你可以移除decltype来简化代码。你可以看出auto如何帮你写泛型函数-reversed_wrapper，它支持数组和vector。</p><p>重构代码：<br>char buf[4] = {‘a’, ‘b’, ‘c’, ‘d’};<br>for(auto it : reversed(buf)){<br>    std::cout &lt;&lt; it;<br>}</p><p>这样写有什么好处？首先，较好的可读性。我们可以立即明白for循环是在反序遍历数组。第二，不易犯错。第三，适配任意类型。</p><p>你可以使用boost::adaptors::reverse(arr)。</p><p>让我们回顾下开始的示例。数组通过传入指针及大小，这样造成reversed无法正常工作。我们怎么办？使用span/array_view。在C++17中，可以使用string_view，代码可以写成下列形式：</p><p>void Foo(std::string_view s);<br>std::string str = “abc”;<br>Foo(std::string_view(“abc”, 3));<br>Foo(“abc”);<br>Foo(str);</p><p>string_view仅封装了string对象的char<em>和长度。这也是为什么上述代码采用形参传值，而不用引用传值。string_view的一个重要特性是兼容多种字符串类型：const char</em>，std::string以及以非空格结尾的const char*。</p><p>代码示例：</p><p>inline void CXmlReader::CXmlInputStream::UnsafePutCharsBack(std::wstring_veiw chars)<br>{<br>for(wchar_t ch : reversed(chars))<br>    UnsafePutCharBack(ch);<br>}</p><p>我们必须记住：当使用这个函数时，string_view(const char*)构造器是隐式使用。这也是为什么我们可以写成如下形式：<br>Foo(pChars);<br>而不是<br>Foo(wstring_view(pChars, nNumChars));</p><p>string_view指向的string不需要以空字符结尾，string::data指向它，一定要记住这点。当将它的值从cstdlib(C语言风格字符串)传入函数，这是未定义行为。使用std::string或者非空字符结尾的字符串你可以很容易避免它。</p><h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><p>暂时不考虑C++，思考下C。如何定义安全的枚举值？对于多数的string类型，使用默认构造函数或者类型转换都不会出问题。实践中，错误经常发生在最简单的构造器中：检查和调试不易发现这些问题，程序员经常忘记检查构造器。下面列举一种危险的构造：</p><p>enum iscsi_param{<br>    …<br>    ISCSI_PARAM_CONN_PORT,<br>    ISCSI_PARAM_CONN_ADDRESS,<br>    …<br>};</p><p>enum iscsi_host_param{<br>    …<br>    ISCSI_HOST_PARAM_IPADDRESS,<br>    …<br>};</p><p>int iscsi_conn_get_addr_param(…,<br>    enum iscsi_param param, …)<br>{<br>    …<br>    switch(param){<br>    case ISCSI_PARAM_CONN_ADDRESS:<br>    case ISCSI_HOST_PARAM_IPADDRESS:<br>    …<br>    }</p><pre><code>return len;</code></pre><p>}</p><p>这段代码摘自Linux内核。<br>PVS-Studio警告：V556 The values of different enum types are compared: switch(ENUM_TYPE_A) { case ENUM_TYPE_B: … }. libiscsi.c 3501</p><p>请注意switch-case中的枚举值，它们来自两个不同的枚举类型。在大段的代码中，这类型错误不易被发现。</p><p>在C++11中，应当使用enum类：如此错误将不能工作，编译阶段会出现错误提示。下面的代码无法通过编译：</p><p>enum class ISCSI_PARAM {<br>  ….<br>  CONN_PORT,<br>  CONN_ADDRESS,<br>  ….<br>};</p><p>enum class ISCSI_HOST {<br>  ….<br>  PARAM_IPADDRESS,<br>  ….<br>};<br>int iscsi_conn_get_addr_param(….,<br> ISCSI_PARAM param, ….)<br>{<br>  ….<br>  switch (param) {<br>  case ISCSI_PARAM::CONN_ADDRESS:<br>  case ISCSI_HOST::PARAM_IPADDRESS:<br>  ….<br>  }</p><p>  return len;<br>}</p><p>下面的代码虽然未使用enum类型，但是也有同样的问题：</p><p>void adns__querysend_tcp(….) {<br>  …<br>  if (!(errno == EAGAIN || EWOULDBLOCK ||<br>        errno == EINTR || errno == ENOSPC ||<br>        errno == ENOBUFS || errno == ENOMEM)) {<br>  …<br>}</p><p>代码摘自ReactOS。</p><p>在C/C++中，使用宏定义是个坏方式，即便使用enum也不安全。</p><p>Initialization in the constructor</p><p>在C++中，多个构造器需要初始化相同的对象。例如：有一个类，它定义两个构造器，它们互相调用。我们一般这样做：把相同的代码封装成一个函数。这样是否就不会出现问题？</p><p>Guess::Guess()<br>{<br>    language_str = DEFAULT_LANGUAGE;<br>    country_str = DEFAULT_COUNTRY;<br>    encoding_str = DEFAULT_ENCODING;<br>}</p><p>Guess::Guess(const char * guess_str)<br>{<br>    Guess();<br>    …<br>}</p><p>注：这段代码摘自LibreOffice</p><p>PVS-Studio警告:V603 The object was created but it is not being used. If you wish to call constructor, ‘this-&gt;Guess::Guess(….)’ should be used. guess.cxx 56</p><p>但是，最好的解决方式是使用构造器代理，我们可以使用下面这种方式在一个构造器函数中调用另一个构造器。</p><p>Guess::Guess(const char * guess_str) : Guess()<br>{<br>…<br>}</p><p>这用方法有几种限制。首先，代理构造器将负责类的初始化。调用者不能初始化其他类型：<br>Guess:Guess(const char * guess_str)<br>: Guess(),<br>  m_member(42)<br>  {<br>  …<br>  }</p><p>另外，我们也必须确保构造器不能循环调用。不幸地是，这样的代码可以通过编译：</p><p>Guess::Guess(const char * guess_str)<br>: Guess(str::string(guess_str))<br>{<br>…<br>}</p><p>Guess::Guess(std::string guess_str)<br>: Guess(guess_str.c_str())<br>{<br>…<br>}</p><h2 id="About-virtual-functions"><a href="#About-virtual-functions" class="headerlink" title="About virtual functions"></a>About virtual functions</h2><p>虚函数存在一个潜在问题：继承类在重载虚函数时，定义一个新函数。看下面代码示例：</p><p>class Base{<br>    virtual void Foo(int x);<br>};</p><p>class Derived : public class Base{<br>    void Foo(int x, int a = 1);<br>};</p><p>Derived::Foo不能使用Base的指针或者引用调用。你可能说不会有人犯这类错误。查看如下代码：<br>class DBClientBase : …<br>{<br>public:<br>    virtual auto_ptr<dbclientcursor> query(<br>        const string &amp;ns,<br>        Query query,<br>        int nToReturn = 0,<br>        int nToSkip = 0,<br>        const BSONObj *fieldsToReturn = 0,<br>        int queryOptions = 0,<br>        int batchSize = 0);<br>};</dbclientcursor></p><p>class DBDirectClinet : public DBClientBase<br>{<br>public:<br>    virtual auto_ptr<dbclientcursor> query(<br>        const string &amp;ns,<br>        Query query,<br>        int nToReturn = 0,<br>        int nToSkip = 0,<br>        const BSONObj *fieldsToReturn = 0,<br>        int queryOptions = 0);<br>};</dbclientcursor></p><p>PVS-Studio警告：V762 Consider inspecting virtual function arguments. See seventh argument of function ‘query’ in derived class ‘DBDirectClient’, and base class ‘DBClientBase’. dbdirectclient.cpp 61</p><p>query函数有许多参数，程序员在重载虚函数时可能会遗漏某个参数或者默认值。</p><p>下列代码更具欺骗性。这个代码可以在32b系统编译通过，但是不能在64b系统编译。原因是，在基类中，参数的类型是DWORD_PTR，但是在继承类中，参数类型是DWORD。<br>class CWnd : public CCmdTarget<br>{<br>    …<br>    virtual void WinHelp(DWORD_PTR dwData, UINT nCmd = HELP_CONTEXT);<br>    …<br>};</p><p>class CFrameWnd : public CWnd {…};</p><p>class CFrameWndEx : public CFrameWnd {</p><pre><code>...virtual void WinHelp(DWORD dwData, UINT nCmd = HELP_CONTEXT);...</code></pre><p>};</p><p>这类错误还可能发生在其他方面。可能忘记const函数或者参数修饰符；函数可能在基类中未添加virtual修饰符；类型可能是signed/unsigend.</p><p>在C++中，新引进override关键字帮助我们避免此类错误。 下列代码将不能编译：</p><p>class DBDirectClinet : public DBClientBase<br>{<br>public:<br>    virtual auto_ptr<dbclientcursor> query(<br>        const string &amp;ns,<br>        Query query,<br>        int nToReturn = 0,<br>        int nToSkip = 0,<br>        const BSONObj *fieldsToReturn = 0,<br>        int queryOptions = 0) override;<br>};</dbclientcursor></p><h2 id="NULL-vs-nullptr"><a href="#NULL-vs-nullptr" class="headerlink" title="NULL vs nullptr"></a>NULL vs nullptr</h2><p>使用NULL可能使空指针变成一个数字0.因为NULL是一个int类型的0值定义的宏，这就不难理解为何下列代码中的第二个函数被选择：</p><p>void Foo(int x, int y, const char *name);<br>void Foo(int x, int y, int ResourceID);<br>Foo(1, 2, NULL);</p><p>上述代码虽然没有错误，但是不是我们想要实现的逻辑关系。针对此种情况，C++引入nullptr_t关键字。现代C++不建议使用NULL。</p><p>另一个例子：NULL可以与int类型的值比较。假设有个WinAPI函数返回HRESULT。HRESULT不是一个指针类型，因此，它与NULL做比较是无意义的。与nullptr比较编译会出现错误，但是与NULL比较却能编译。</p><p>if(WinApiFoo(a, b) != NULL) //That’s bad<br>if(WinApiFoo(a, b) != nullptr) //Hooray, a compilation error</p><p>va_arg<br>项目中经常遇到无法准确知道函数参数具体数量。经典例子：标准输入/输出。当然，你可以采取一种方式避免使用可变参数，但是可变参数定义却更加方便易用。以前的C++采用什么方式呢？va_list。它会带来什么问题？它不仅容易传递一个错误类型的参数。而且也无法传递任意参数。参考下面示例：</p><p>typedef std::wstring string16;<br>const base::string16&amp; relaunch_flags() const;</p><p>int RelaunchChrome(const DelegateExecuteOperation&amp; operation)<br>{<br>    AtlTrace(“Relaunching [%1s] with flags [%s] \n”,<br>                operation.mutex().c_str(),<br>                operation.relaunch_flags());<br>    …<br>}</p><p>注：这段代码摘自Chromium</p><p>PVS-Studio 警告: V510 The ‘AtlTrace’ function is not expected to receive class-type variable as third actual argument. delegate_execute.cc 96</p><p>程序员想打印std::wstring字符串，但是忘记调用c_str()函数。wstring类型无法转换成wchar_t*类型。当然，函数不能正确计算。</p><p>cairo_status_t<br>_cairo_win32_print_gdi_error(const char <em>context)<br>{<br>…<br>fwprintf(stderr, L”%s:%S”, context, (wchar_t </em>)lpMsgBuf);<br>…<br>}</p><p>注：这段代码摘自Cairo.</p><p>PVS-Studio 警告: V576 Incorrect format. Consider checking the third actual argument of the ‘fwprintf’ function. The pointer to string of wchar_t type symbols is expected. cairo-win32-surface.c 130</p><p>上述代码中，程序员意图格式化字符串。在VC++中，wchar_t<em>使用%s。char</em>使用%S.有趣的是，字符串中的这些错误会输出错误信息。所以它们不容易看到。</p><p>static void GetNameForFile(<br>    const char* baseFileName,<br>    const uint32 fileIdx,<br>    char outputName[512])<br>{<br>    assert(baseFileName != NULL);<br>    sprintf(outputName, “%s_%d”, baseFileName, fileIdx);<br>}</p><p>注：这段代码摘自CryEngine 3 SDK</p><p>PVS-Studio 警告: V576 Incorrect format. Consider checking the fourth actual argument of the ‘sprintf’ function. The SIGNED integer type argument is expected. igame.h 66</p><p>整形也容易造成错误。尤其是当它们的大小与平台无关。最常见的是有符号类型和无符号类型。值很大的数可能被打印成负值。</p><p>ReadAnddumpLargeSttb(cb, err)<br>int cb:<br>int err:<br>{<br>…<br>printf(“\n - %d strings were read, “<br>        “%d were expected (decimal numbers) - \n”);<br>…<br>}</p><p>注：这段代码摘自word for windows 1.1a。</p><p>PVS-Studio 警告: V576 Incorrect format. A different number of actual arguments is expected while calling ‘printf’ function. Expected: 3. Present: 1. dini.c 498</p><p>考察下面的示例<br>BOOL CALLBACK EnumPickIconResourceProc(<br>    HMODULE hModule, LPCWSTR lpszType,<br>    LPWSTR lpszName, LONG_PTR lParam)<br>{<br>    …<br>    swprintf(szName, L”%u”, lpszName);<br>    …<br>}</p><p>注：这段代码摘自ReactOS。</p><p>PVS-Studio 警告: V576 Incorrect format. Consider checking the third actual argument of the ‘swprintf’ function. To print the value of pointer the ‘%p’ should be used. dialogs.cpp 66</p><p>在64b系统中，这段代码会出错。指针的大小由体系结构决定，使用%u是个不好的主意，我们应该改成什么？PVS工具给我们的建议是%p。如果调试时打印指针地址，这是个好主意。</p><p>使用可变参数的函数有什么问题？你不能检查参数类型，参数个数。</p><p>这里有更好的方式。首先，采用可变模板。利用它，我们能在编译时获取所有的类型信息。下面的代码更加安全：</p><p>void printf(const char* s)<br>{<br>    std::cout &lt;&lt; s;<br>}</p><p>template<typename t,="" typename...="" args=""><br>void printf(const char<em> s, T value, Args… args){<br>    while(s &amp;&amp; </em>s){<br>        if(<em>s == ‘%’ &amp;&amp; </em>++s != ‘%’){<br>            std::cout &lt;&lt; value;<br>            return printf(++s, args…);<br>        }<br>        std::cout &lt;&lt; *s++;<br>    }<br>}</typename></p><p>实践中，它的使用时无指针的。但是在可变模板示例中，只要你能想到都能实现。</p><p>一个更结构化的方式是使用可变数量参数类型操作std::initializer_list。它不允许传入不同类型的参数。如果可能，尽量使用std::initializer_list。</p><p>void Foo(std::initializer_list<int> a);<br>Foo({1, 2, 3, 4, 5});</int></p><p>它非常便利，跟begin、end及range for类似。</p><h2 id="Narrowing"><a href="#Narrowing" class="headerlink" title="Narrowing"></a>Narrowing</h2><p>在编程过程中，收缩(精度降低,范围变小…)带来许多问题。尤其是64b系统。采用正确的类型是很好的实践原则。但是，程序员经常碰见类型转换。如下代码：<br>char<em> ptr = …;<br>int n = (int)ptr;<br>…<br>ptr = (char</em>)n;</p><p>下述代码有两个整数类型，程序员计算两个数的比率：<br>virtual int GetMappingWidth() = 0;<br>virtual int GetMappingHeight() = 0;</p><p>void CDetailObjectSystem::LevelInitPreEntity()<br>{<br>    …<br>    float flRatio = pMat-&gt;GetMappingWidth() /<br>                    pMat-&gt;GetMappingHeight();<br>    …<br>}</p><p>注：这段代码摘自Source Engine SDK.</p><p>PVS-Studio 警告: V636 The expression was implicitly cast from ‘int’ type to ‘float’ type. Consider utilizing an explicit type cast to avoid the loss of a fractional part. An example: double A = (double)(X) / Y;. Client (HL2) detailobjectsystem.cpp 1480</p><p>不幸地是，上述代码可能发生错误。有多种方式可以避免类型的默认转换。但是，在C++11中，最好的方式是使用初始化方法，它会阻止默认转换。在下列代码中，在编译阶段会给出错误信息。</p><p>float flRatio{pMat-&gt;GetMappingWidth() / pMat-&gt;GetMappingHeight()};</p><h2 id="No-news-is-good-news"><a href="#No-news-is-good-news" class="headerlink" title="No news is good news"></a>No news is good news</h2><p>在程序中，大量的错误发生在资源和内存管理。便捷易用是对现代程序语言最重要的设计要求。现代C++也遵循这个设计原则，提供了大量的工具来自动控制资源。</p><p>void AccessibleContainsAccessible(…)<br>{<br>    auto_ptr<variant> child_array(new VARIANT[child_count]);<br>}</variant></p><p>注：这段代码摘自Chromium</p><p>PVS-Studio 警告: V554 Incorrect use of auto_ptr. The memory allocated with ‘new []’ will be cleaned using ‘delete’. interactive_ui_tests accessibility_win_browsertest.cc 171</p><p>当然，智能指针不是新概念，例如，std::auto_ptr类是一个智能指针。但是，我们并不使用auto_ptr，在C++17中已经被移除。上述代码错误地使用auto_ptr，这个类不能在数组中使用，它采用delete释放资源而不是delete []。unique_ptr用来替代auto_ptr，它提供特定的方式管理数组。通过传递deleter仿函数代替delete。</p><p>void text_editor::_m_draw_string(…) const<br>{<br>    …<br>    std::unique_ptr<unsigned> pxbuf_ptr(new unisgned[len]);<br>    …<br>}</unsigned></p><p>注：这段代码摘自nana。</p><p>PVS-Studio 警告: V554 Incorrect use of unique_ptr. The memory allocated with ‘new []’ will be cleaned using ‘delete’. text_editor.cpp 3137</p><p>上述代码存在同样的错误。它应该被改写成unique_ptr<unsigned[]>。<br>现代C++中使用std::vector或许更好？查看下列代码：<br>template<class topenglstage=""></class></unsigned[]></p><p>static FString GetShaderStageSource(TOpenGLStage<em> Shader)<br>{<br>    …<br>    ANSICHAR</em> Code = new ANSICHAR[Len +  1];<br>    glGetShaderSource(Shaders[i], Len + 1, &amp;Len, Code);<br>    Source += Code;<br>    delete Code;<br>    …<br>}</p><p>注：这段代码摘自Unreal Engine 4.</p><p>PVS-Studio 警告: V611 The memory was allocated using ‘new T[]’ operator but was released using the ‘delete’ operator. Consider inspecting this code. It’s probably better to use ‘delete [] Code;’. openglshaders.cpp 1790</p><p>不使用智能指针，上述错误很容易发生。采用new[]分配内存，却用delete释放内存。</p><p>bool CxImage::LayerCreate(int32_t position)<br>{<br>    …<br>    CxImage<em>* ptmp = new CxImage</em>[info.nNumLayers + 1];<br>    …<br>    free(ptmp);<br>    …<br>}</p><p>注：这段代码摘自CxImage。</p><p>PVS-Studio 警告: V611 The memory was allocated using ‘new’ operator but was released using the ‘free’ function. Consider inspecting operation logics behind the ‘ptmp’ variable. ximalyr.cpp 50</p><p>上述代码将malloc/free和new/delete混淆。</p><p>int settings_proc_language_packs(…)<br>{<br>    …<br>    if(mem_files)<br>    {<br>        mem_files = 0;<br>        sys_mem_free(mem_files);<br>    }<br>    …<br>}</p><p>注：这段代码摘自Fennec Media.</p><p>PVS-Studio 警告: V575 The null pointer is passed into ‘free’ function. Inspect the first argument. settings interface.c 3096</p><p>这里有个有趣的示例。一个指针被释放并且赋值为0。有时，程序员定义一个特殊的宏。虽然，这是个很好的技术：它能防止在其他地方释放内存。但是，这个表达式容易造成困惑，free函数传入null指针。</p><p>ETOOLS_API int __stdcall ogg_enc(…)<br>{<br>    format = open_audio_file(in, &amp;enc_opts);<br>    if(!format)<br>    {<br>        fclose(in);<br>        return 0;<br>    }<br>    out = fopen(out_fn, “wb”);<br>    if(out == NULL)<br>    {<br>        fclose(out);<br>        return 0;<br>    }<br>}</p><p>这个问题不仅与内存管理有关，也与资源管理有关。例如，忘记关闭文件。RAII(‘智能指针’)管理内存帮助我们避免许多内存泄漏问题。</p><p>auto deleter = <a href="FILE* f"></a> {fclose(f);};</p><p>std::unique_ptr<file, decltype(deleter)=""> p(fopen(“1.txt”, “w”), deleter);</file,></p><h2 id="What-is-the-result"><a href="#What-is-the-result" class="headerlink" title="What is the result?"></a>What is the result?</h2><p>现代C++提供大量工具来帮助我们写出更加安全的代码。许多编译时的分析和检查已经出现。你可以更方便地切换内存和资源管理模型。</p><p>但是没有任何技术能保证你不犯错。灵活采用各种技术及工具，可以帮助我们写出高质量代码，节省时间和精力。</p><p>推荐使用：PVS-Studio(<a href="https://www.viva64.com/en/pvs-studio/)，提供" target="_blank" rel="noopener">https://www.viva64.com/en/pvs-studio/)，提供</a><br>Linux版本和Windows VS的插件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.cplusplus.com/articles/y807M4Gy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cplusplus.com/articles/y807M4Gy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C++程序最主要的一个问题是有大量未定义的构造器，它会造成许多意想不到的错误。使用静态分析工具有时可以发现极个别的问题。然而，最佳的检测错误的时期在编译阶段。采用现代C++技术，不仅帮助我们写出简洁的代码，而且更加安全可靠。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://www.itrayweb.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>寻找元理</title>
    <link href="http://www.itrayweb.com/2018/01/10/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E5%AF%BB%E6%89%BE%E5%85%83%E7%90%86/"/>
    <id>http://www.itrayweb.com/2018/01/10/生活杂谈/寻找元理/</id>
    <published>2018-01-10T03:00:00.000Z</published>
    <updated>2018-04-12T06:01:21.078Z</updated>
    
    <content type="html"><![CDATA[<p>元,取最初,最基本之意;元理,概括万事万物的来源的真理。</p><a id="more"></a><p>不论工作(学习)还是生活,总喜欢追求一个原因,认为知道原因后,可以更高效地完成一切事情.然而,所有的原因却是没有尽头的.当明白一个因的时候,却会发现它也是一个果,还有另一个因在前面等着去探索.这样的追溯总是无穷无尽,循环往复,永无尽头.</p><p>原因真的是无止境的吗？或许是或许不是,作为微尘般的我们,无法对此做一个准确的回答.但是,每个人心中都有自己的坚持.信神(上帝)的人把神作为一切事物的源头,即神是元理.不信神的人却无法对元理做一个肯定、自我信服的回答.</p><p>西方对上帝的定义,更具统一性.东方的至高神多如牛毛,每个地区,每个民族对于至高神的定义不尽相同,亦或自相矛盾.<br>神话中的盘古作为开天辟地之神,本可以与西方的上帝同一,但它却不具备无所不能的特性,不论是开天过程的繁杂,还是开天之后的自我牺牲,让人产生盘古并不是至高神的印象,似乎盘古处于其他规则的控制之下.</p><p>印度梵天,</p><p>日本日照大神,</p><p>…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;元,取最初,最基本之意;元理,概括万事万物的来源的真理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活杂谈" scheme="http://www.itrayweb.com/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>现实与网络</title>
    <link href="http://www.itrayweb.com/2018/01/04/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E7%8E%B0%E5%AE%9E%E4%B8%8E%E7%BD%91%E7%BB%9C/"/>
    <id>http://www.itrayweb.com/2018/01/04/生活杂谈/现实与网络/</id>
    <published>2018-01-04T08:08:31.000Z</published>
    <updated>2018-04-12T06:01:21.082Z</updated>
    
    <content type="html"><![CDATA[<p>现实中，身体是你的马甲，看到这个马甲，我知道我见到的就是你；<br>网络上，账号是你的马甲，看到这个马甲，我无法判断我见到的是你还是他。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现实中，身体是你的马甲，看到这个马甲，我知道我见到的就是你；&lt;br&gt;网络上，账号是你的马甲，看到这个马甲，我无法判断我见到的是你还是他。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="生活杂谈" scheme="http://www.itrayweb.com/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>编译QGis</title>
    <link href="http://www.itrayweb.com/2017/12/08/QGis/%E7%BC%96%E8%AF%91QGis/"/>
    <id>http://www.itrayweb.com/2017/12/08/QGis/编译QGis/</id>
    <published>2017-12-07T16:00:00.000Z</published>
    <updated>2018-04-12T06:01:21.036Z</updated>
    
    <content type="html"><![CDATA[<p>QGis版本采用<a href="https://github.com/qgis/QGIS/tree/release-2_14" target="_blank" rel="noopener">2.14(LTR)</a>，该版本对Qt4的支持比较好。编译参考：<a href="https://htmlpreview.github.io/?https://raw.github.com/qgis/QGIS/master/doc/INSTALL.html#toc13" target="_blank" rel="noopener">QGis官方编译文档</a></p><a id="more"></a><h2 id="安装vs2010"><a href="#安装vs2010" class="headerlink" title="安装vs2010"></a>安装vs2010</h2><h2 id="安装并配置Qt"><a href="#安装并配置Qt" class="headerlink" title="安装并配置Qt"></a>安装并配置Qt</h2><ul><li><p>安装<a href="http://download.qt.io/archive/qt/" target="_blank" rel="noopener">Qt4.8.6</a>，默认位置是C:\Qt\4.8.6。<br>配置环境变量QTDIR=C:\Qt\4.8.6</p></li><li><p>安装<a href="http://download.qt.io/archive/vsaddin/" target="_blank" rel="noopener">qt-vs-addin-1.1.11</a>，该版本对应vs2010。</p></li></ul><h2 id="安装辅助工具"><a href="#安装辅助工具" class="headerlink" title="安装辅助工具"></a>安装辅助工具</h2><ul><li>下载并安装<a href="https://cmake.org/" target="_blank" rel="noopener">cmake</a></li><li><p>下载<a href="https://cygwin.com/" target="_blank" rel="noopener">cygwin</a><br>在选择安装包的页面，选择bison、flex、git，在搜索框中输入关键字后，出现多个安装包，不知道具体的安装包情况，可以选择所有的安装包。</p></li><li><p>下载<a href="http://trac.osgeo.org/osgeo4w/" target="_blank" rel="noopener">OSGeo4W</a>，OSGeo4W是最关键的工具，可以下载编译依赖的头文件以及库函数。</p></li></ul><h4 id="OSGeo4W安装"><a href="#OSGeo4W安装" class="headerlink" title="OSGeo4W安装"></a>OSGeo4W安装</h4><ol><li><p>点击运行 osgeo4W-setup-x86.exe，选择Adavanced install(二次开发选项)，点击【下一步】；<br><img src="/2017/12/08/QGis/编译QGis/1.png" alt=""></p></li><li><p>选择“Download Without Installing”，下载离线安装包，点击【下一步】；<br><img src="/2017/12/08/QGis/编译QGis/2.png" alt=""></p></li><li><p>设置离线包存放目录，点击【下一步】；</p></li><li><p>直接点击【下一步】</p></li><li><p>选择下载地址，点击【下一步】；</p></li><li><p>选择安装包<br>expat,fcgi,gdal,grass,gsl-devel,iconv,libzip-devel,libspatialindex-devel,pyqt4,python3-devel,python3-qscintilla,python3-nose2,python3-future,python3-pyyaml,python3-mock,python3-six,qca-devel,qca-libs,qscintilla,qwt-devel,sip,spatialite,oci,libzip-devel</p></li><li><p>选择同意协议，点击【下一步】；</p></li><li>下载完成。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QGis版本采用&lt;a href=&quot;https://github.com/qgis/QGIS/tree/release-2_14&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2.14(LTR)&lt;/a&gt;，该版本对Qt4的支持比较好。编译参考：&lt;a href=&quot;https://htmlpreview.github.io/?https://raw.github.com/qgis/QGIS/master/doc/INSTALL.html#toc13&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QGis官方编译文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="QGis" scheme="http://www.itrayweb.com/tags/QGis/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客中插入图片、音乐</title>
    <link href="http://www.itrayweb.com/2017/12/06/hexo/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E3%80%81%E9%9F%B3%E4%B9%90/"/>
    <id>http://www.itrayweb.com/2017/12/06/hexo/hexo博客中插入图片、音乐/</id>
    <published>2017-12-06T03:04:00.000Z</published>
    <updated>2017-12-07T10:51:19.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>1.安装插件(管理员权限),打开命令终端，输入命令：<code>npm install hexo-asset-image –-save</code>；<br>2.打开hexo初始化目录下的<strong> _config.yml </strong> ，查找到关键字<strong> post_asset_folder </strong>，将其默认值<strong> false </strong>更改为<strong> true </strong> (注意空格)。</p><a id="more"></a><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li>新建博客，输入命令：<code>Hexo new image</code>（在/source/_posts目录下生成<strong> image.md </strong>和<strong> image文件夹 </strong>。</li><li>在<strong> image文件夹 </strong>下放入一张图片，如：1.jpg。</li><li>打开<strong> image.md </strong>文档，在正文输入图片<code>![This is example](image/1.jpg)</code>**</li><li>上面插入的是本地图片，还可以插入网络图片，如<code>![The picture comes from the network.](http://img07.tooopen.com/images/20170309/tooopen_sy_201188749612.jpg)</code><blockquote><p>插入图片的语法：<br><code>![图片描述（可省略）](/文件夹名/图片名称)</code></p></blockquote></li></ul><h2 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h2><p>插入网易云音乐的歌曲链接，浏览器中打开<a href="http://music.163.com/" target="_blank" rel="noopener">网易云音乐</a>,点击需要插入的歌曲(如：成都)，点击左侧“生成外链播放器”，调整属性值。复制HTML代码，粘贴到博客的相应位置即可。</p><p><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=436514312&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</code></p><p><img src="/2017/12/06/hexo/hexo博客中插入图片、音乐/1.png" alt=""></p><p><img src="/2017/12/06/hexo/hexo博客中插入图片、音乐/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;插入图片&quot;&gt;&lt;a href=&quot;#插入图片&quot; class=&quot;headerlink&quot; title=&quot;插入图片&quot;&gt;&lt;/a&gt;插入图片&lt;/h2&gt;&lt;p&gt;1.安装插件(管理员权限),打开命令终端，输入命令：&lt;code&gt;npm install hexo-asset-image –-save&lt;/code&gt;；&lt;br&gt;2.打开hexo初始化目录下的&lt;strong&gt; _config.yml &lt;/strong&gt; ，查找到关键字&lt;strong&gt; post_asset_folder &lt;/strong&gt;，将其默认值&lt;strong&gt; false &lt;/strong&gt;更改为&lt;strong&gt; true &lt;/strong&gt; (注意空格)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网站博客" scheme="http://www.itrayweb.com/tags/%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>hexo插件:百度、谷歌搜索引擎站点收录</title>
    <link href="http://www.itrayweb.com/2017/12/06/hexo/hexo%E6%8F%92%E4%BB%B6-%E7%99%BE%E5%BA%A6%E3%80%81%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/"/>
    <id>http://www.itrayweb.com/2017/12/06/hexo/hexo插件-百度、谷歌搜索引擎站点收录/</id>
    <published>2017-12-06T03:00:38.000Z</published>
    <updated>2017-12-07T10:51:19.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>1.启动命令终端，依次输入下列命令：<br><code>npm install hexo-generator-sitemap --save</code><br><code>npm install hexo-generator-baidu-sitemap --save</code></p><a id="more"></a><p>2.运行命令hexo g后，会在public目录下生成sitemap.xml、baidusitemap.xml</p><h2 id="百度、谷歌注册网站"><a href="#百度、谷歌注册网站" class="headerlink" title="百度、谷歌注册网站"></a>百度、谷歌注册网站</h2><p><a href="https://ziyuan.baidu.com/dashboard/index" target="_blank" rel="noopener">百度站点平台</a></p><p><a href="https://www.google.com/webmasters/tools" target="_blank" rel="noopener">谷歌站点平台</a></p><blockquote><p><strong> 注意 </strong> 插件安装必须有系统管理员权限，即运行终端时，鼠标右击，点选【以管理员身份运行】。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;插件安装&quot;&gt;&lt;a href=&quot;#插件安装&quot; class=&quot;headerlink&quot; title=&quot;插件安装&quot;&gt;&lt;/a&gt;插件安装&lt;/h2&gt;&lt;p&gt;1.启动命令终端，依次输入下列命令：&lt;br&gt;&lt;code&gt;npm install hexo-generator-sitemap --save&lt;/code&gt;&lt;br&gt;&lt;code&gt;npm install hexo-generator-baidu-sitemap --save&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="网站博客" scheme="http://www.itrayweb.com/tags/%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>hexo插件:RSS订阅</title>
    <link href="http://www.itrayweb.com/2017/12/06/hexo/hexo%E6%8F%92%E4%BB%B6-RSS%E8%AE%A2%E9%98%85/"/>
    <id>http://www.itrayweb.com/2017/12/06/hexo/hexo插件-RSS订阅/</id>
    <published>2017-12-06T02:56:14.000Z</published>
    <updated>2017-12-07T10:51:19.777Z</updated>
    
    <content type="html"><![CDATA[<p>RSS订阅插件<br><code>npm install hexo-generator-feed --save</code></p><a id="more"></a><blockquote><p><strong> 注意 </strong> 插件安装必须有系统管理员权限，即运行终端时，鼠标右击，点选【以管理员身份运行】。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RSS订阅插件&lt;br&gt;&lt;code&gt;npm install hexo-generator-feed --save&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="网站博客" scheme="http://www.itrayweb.com/tags/%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之访问者模式Visitor</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8FVisitor/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之访问者模式Visitor/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.789Z</updated>
    
    <content type="html"><![CDATA[<p>从对象结构中分离独立的算法(逻辑操作)，实现修改算法(逻辑操作)时，不改变对象结构。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeVisitor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitAssignment</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitVariableRefNode</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeCheckingVisitor</span> :</span> <span class="keyword">public</span> NodeVisitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitAssignment</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitVariableRefNode</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeGeneratingVisitor</span> :</span> <span class="keyword">public</span> NodeVisitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitAssignment</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitVariableRefNode</span><span class="params">(AssignmentNode)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(NodeVisitor)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssignmentNode</span> :</span> <span class="keyword">public</span> Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(NodeVisitor v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v-&gt;visitAssignment(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableRefNode</span> :</span> <span class="keyword">public</span> Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(NodeVisitor v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v-&gt;visitVariableRef(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从对象结构中分离独立的算法(逻辑操作)，实现修改算法(逻辑操作)时，不改变对象结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰模式Decorator</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8FDecorator/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之装饰模式Decorator/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.788Z</updated>
    
    <content type="html"><![CDATA[<p>动态地给一个对象扩展功能，而不是通过子类继承。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The Window interface class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Draws the Window</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//Returns a description of the Window</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Implementation of a simple Window without any scrollbars</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleWindow</span> :</span> <span class="keyword">public</span> Window</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Draw window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"simple window"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//abstract decorator class - note that it implements window</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowDecorator</span> :</span> <span class="keyword">public</span> Window</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Window* _windowToBeDecorated; <span class="comment">//the window being decorated</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">WindowDecorator(Window* windowToBeDecorated)</span><br><span class="line">&#123;</span><br><span class="line">_windowToBeDecorated = windowToBeDecorated;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_windowToBeDecorated-&gt;draw(); <span class="comment">//Delegation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _windowToBeDecorated-&gt;getDescription(); <span class="comment">//Delegation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The first concrete decorator which adds vertical scrollbar functionality</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerticalScrollBarDecorator</span> :</span> <span class="keyword">public</span> WindowDecorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">VerticalScrollBarDecorator(Window* windowToBeDecorated)</span><br><span class="line">: WindowDecorator(windowToBeDecorated)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WindowDecorator::draw();</span><br><span class="line">drawVerticalScrollBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> WindowDecorator::getDescription() + <span class="string">", including vertical scrollbars"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawVerticalScrollBar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Draw the vertical scrollbar</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//The second concrete decorator which adds horizontal scrollbar functionality</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HorizontalScrollBarDecorator</span> :</span> <span class="keyword">public</span>  WindowDecorator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">HorizontalScrollBarDecorator(Window* windowToBeDecorated)</span><br><span class="line">: WindowDecorator(windowToBeDecorated)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WindowDecorator::draw();</span><br><span class="line">drawHorizontalScrollBar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> WindowDecorator::getDescription() + <span class="string">", including horizontal scrollbars"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawHorizontalScrollBar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Draw the horizontal scrollbar</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//create a decorated window with horizontal and vertical scrollbars.</span></span><br><span class="line">Window* decoratedWindow = <span class="keyword">new</span> HorizontalScrollBarDecorator(<span class="keyword">new</span> VerticalScrollBarDecorator(<span class="keyword">new</span> SimpleWindow));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Print the window's description</span></span><br><span class="line">decoratedWindow-&gt;getDescription();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态地给一个对象扩展功能，而不是通过子类继承。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式Flyweight</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8FFlyweight/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之享元模式Flyweight/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.782Z</updated>
    
    <content type="html"><![CDATA[<p>共享大量的细粒度对象。</p><a id="more"></a><p>适宜处理的问题：</p><p>1.高效的支持大量的对象；</p><p>2.避免创建大量的对象。</p><p>示例：</p><p>文本编辑器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;共享大量的细粒度对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式Adapter</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8FAdapter/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之适配器模式Adapter/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.789Z</updated>
    
    <content type="html"><![CDATA[<p>将一个类接口封装成另一类接口。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SpecificRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;Adaptee::SpecificRequest();&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>1.底层模块为上层模块提供接口，当底层模块改变时，不希望重新定义上层模块，在中间添加一层Adapter模块进行对接；</p><p>2.不同的类适配到一个算法，例如：iterater</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将一个类接口封装成另一类接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之责任链模式Chain of Responsibility</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8FChain%20of%20Responsibility/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之责任链模式Chain of Responsibility/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.789Z</updated>
    
    <content type="html"><![CDATA[<p>将一种响应（请求）通过一条彼此关联的处理类处理。一般遵照由小到大的粒度。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchasePower</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">static</span> final <span class="keyword">double</span> _BASE = <span class="number">500</span>;</span><br><span class="line">PurchasePower* _successor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(PurchasePower* successor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_successor = successor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest* request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(reuqest-&gt;getAmount() &lt; getAllowable() )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getRole() &lt;&lt; <span class="string">"will approve $"</span> + request-&gt;getAmount() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(_successor != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_successor-&gt;processRequest(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagerPPower</span> :</span> <span class="keyword">public</span> PurchasePower</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _BASE * <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Manager"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectorPPower</span> :</span> <span class="keyword">public</span> PurchasePower</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _BASE * <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Director"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VicePresidentPPower</span> :</span> <span class="keyword">public</span> PurchasePower</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _BASE * <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Vice President"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PresidentPPower</span> :</span> <span class="keyword">public</span> PurchasePower</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getAllowable</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _BASE * <span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">getRole</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"President"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseRequest</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> _amount;</span><br><span class="line"><span class="built_in">string</span> _purpose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">PurchaseRequest(<span class="keyword">double</span> amount, <span class="built_in">string</span> purpose)</span><br><span class="line">&#123;</span><br><span class="line">_amount = amount;</span><br><span class="line">_purpose = purpose;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _amount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_amount = amount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getPurpose</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _purpose;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPurpose</span><span class="params">(<span class="built_in">string</span> purpose)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_purpose = purpose;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ManagerPPower* manager = <span class="keyword">new</span> ManagerPPower();</span><br><span class="line">DirectorPPower* director = <span class="keyword">new</span> DirectorPPower();</span><br><span class="line">VicePresidentPPower* vp = <span class="keyword">new</span> VicePresidentPPower();</span><br><span class="line">PresidentPPower* president = <span class="keyword">new</span> PresidentPPower();</span><br><span class="line"></span><br><span class="line">manager-&gt;setSuccessor(director);</span><br><span class="line">director-&gt;setSuccessor(vp);</span><br><span class="line">vp-&gt;setSuccessor(president);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter the amount to check who should approve your expenditure."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">manager-&gt;processRequest(<span class="keyword">new</span> PurchaseRequest(d, <span class="string">"General"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>典型的例子：界面帮助请求</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将一种响应（请求）通过一条彼此关联的处理类处理。一般遵照由小到大的粒度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式Observer</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8FObserver/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之观察者模式Observer/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.788Z</updated>
    
    <content type="html"><![CDATA[<p>定义一个管理类(观察者)，负责管理其他对某类状态感兴趣的对象(需注册及注销)。</p><a id="more"></a><p>代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Observer *obs : _observers)</span><br><span class="line">&#123;</span><br><span class="line">obs-&gt;update();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">List&lt;Observer *&gt; _observers;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverA</span> :</span> <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Subject client;</span><br><span class="line"></span><br><span class="line">Observer *obs = <span class="keyword">new</span> ObserverA;</span><br><span class="line">client.attach(obs);</span><br><span class="line"></span><br><span class="line">client.notify();</span><br><span class="line"></span><br><span class="line">client.detach(obs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义一个管理类(观察者)，负责管理其他对某类状态感兴趣的对象(需注册及注销)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之组合模式Composite</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8FComposite/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之组合模式Composite/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.788Z</updated>
    
    <content type="html"><![CDATA[<p>采用树形结构表示“部分-整体”关系，类用户使用一致的方式对待单个对象和组合对象。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graphic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//prints the graphic</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Composite</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompositeGraphic</span> :</span> <span class="keyword">public</span> Graphic</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">List&lt;Graphic*&gt; childGraphics;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Graphic *graphic : childGraphics)</span><br><span class="line">&#123;graphic-&gt;print();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adds the graphic to the composition.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Graphic *graphic)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">childGraphics.add(graphic);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Removes the graphic from the composition.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Graphic *graphic)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">childGraphics.remove(graphic);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Leaf</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ellipse</span> :</span> <span class="keyword">public</span> Graphic</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Prints the graphic.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Ellipse"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Initialize four ellipses</span></span><br><span class="line">Ellipse *ellipse1 = <span class="keyword">new</span> Ellipse();</span><br><span class="line">Ellipse *ellipse2 = <span class="keyword">new</span> Ellipse();</span><br><span class="line">Ellipse *ellipse3 = <span class="keyword">new</span> Ellipse();</span><br><span class="line">Ellipse *ellipse4 = <span class="keyword">new</span> Ellipse();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Initialize four composite graphics</span></span><br><span class="line">CompositeGraphic *graphic = <span class="keyword">new</span> CompositeGraphic();</span><br><span class="line">CompositeGraphic *graphic1 = <span class="keyword">new</span> CompositeGraphic();</span><br><span class="line">CompositeGraphic *graphic2 = <span class="keyword">new</span> CompositeGraphic();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Composes the graphics</span></span><br><span class="line">graphic1-&gt;add(ellipse1);</span><br><span class="line">graphic1-&gt;add(ellipse2);</span><br><span class="line">graphic1-&gt;add(ellipse3);</span><br><span class="line"></span><br><span class="line">graphic2-&gt;add(ellipse4);</span><br><span class="line"></span><br><span class="line">graphic-&gt;add(graphic1);</span><br><span class="line">graphic-&gt;add(graphic2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Prints the complete graphic (four times the string "Ellipse").</span></span><br><span class="line">graphic-&gt;print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;采用树形结构表示“部分-整体”关系，类用户使用一致的方式对待单个对象和组合对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式Strategy</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FStrategy/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之策略模式Strategy/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.787Z</updated>
    
    <content type="html"><![CDATA[<p>封装不同的算法，使其独立于对象改变。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICalculate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Minus</span> :</span> <span class="keyword">public</span> ICalculate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value1 - value2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plus</span> :</span> <span class="keyword">public</span> ICalculate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculateClient</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ICalculate* _strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CalculateClient(ICalculate* strategy)</span><br><span class="line">: _strategy(strategy)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~CalculateClient()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(_strategy != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _strategy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(ICalculate* strategy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(_strategy != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(_strategy != <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">return</span> _strategy-&gt;calculate(value1, value2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CalculateClient* client = <span class="keyword">new</span> CalculateClient(<span class="keyword">new</span> Minus);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Minus: "</span> &lt;&lt; client-&gt;calculate(<span class="number">7</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//change the strategy</span></span><br><span class="line">client-&gt;setStrategy(<span class="keyword">new</span> plus);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Plus: "</span> &lt;&lt; client-&gt;calculate(<span class="number">7</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;封装不同的算法，使其独立于对象改变。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式State</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8FState/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之状态模式State/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.787Z</updated>
    
    <content type="html"><![CDATA[<p>定义状态量与行为的对应，当状态改变时，类对象的行为随着改变。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Statelike</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">writeName</span><span class="params">(StateContext context, <span class="built_in">string</span> name)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateLowerCase</span> :</span> <span class="keyword">public</span> Statelike</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">writeName</span><span class="params">(StateContext context, <span class="built_in">string</span> name)</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name.toLowerCase() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">context.setState(<span class="keyword">new</span> StateMultipleUpperCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMultipleUpperCase</span> :</span> <span class="keyword">public</span> Statelike</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">writeName</span><span class="params">(StateContext context, <span class="built_in">string</span> name)</span> override</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name.toUpperCase() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(++count &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">context.setState(<span class="keyword">new</span> StateLowerCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateContext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Statelike myState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">StateContext()</span><br><span class="line">&#123;</span><br><span class="line">setState(<span class="keyword">new</span> StateLowerCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setState</span><span class="params">(Statelike newState)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">myState = newState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeName</span><span class="params">(<span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">myState.writeName(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StateContext* sc = <span class="keyword">new</span> StateContext;</span><br><span class="line"></span><br><span class="line">sc-&gt;writeName(<span class="string">"Monday"</span>);</span><br><span class="line">　　　　sc-&gt;writeName(<span class="string">"Tuesday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Wednesday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Thursday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Friday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Saturday"</span>);</span><br><span class="line">        sc-&gt;writeName(<span class="string">"Sunday"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义状态量与行为的对应，当状态改变时，类对象的行为随着改变。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法Template Method</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95Template%20Method/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之模板方法Template Method/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.786Z</updated>
    
    <content type="html"><![CDATA[<p>在基类中定义一套算法框架，子类只能更改特定的实现细节。</p><a id="more"></a><p>代码示例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">function1();</span><br><span class="line">function2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"invoke the function1 of AbstractClass"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"invoke the function2 of AbstractClass"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass1</span> :</span> <span class="keyword">public</span> AbstractClass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"invoke the function1 of SubClass1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在基类中定义一套算法框架，子类只能更改特定的实现细节。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥接模式Bridge</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8FBridge/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之桥接模式Bridge/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.786Z</updated>
    
    <content type="html"><![CDATA[<p>解耦，抽象接口与实现分离。</p><a id="more"></a><p>代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IAbstractBridge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CallMethod1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CallMethod2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractBridge</span> :</span> <span class="keyword">public</span> IAbstractBridge</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">AbstractBridge(IBridge *bridge)</span><br><span class="line">&#123;</span><br><span class="line">_bridge = bridge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallMethod1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;_bridge-&gt;Function1();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallMethod2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;_bridge-&gt;Function2();&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">IBridge *_bridge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IBridge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Function1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Function2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge1</span> :</span> <span class="keyword">public</span> IBridge</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bridge1.Function1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bridge1.Funciton2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge2</span> :</span> <span class="keyword">public</span> IBridge</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bridge2.Function1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bridge2.Funciton2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解耦，抽象接口与实现分离。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之构建模式Builder</title>
    <link href="http://www.itrayweb.com/2017/12/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%BC%8FBuilder/"/>
    <id>http://www.itrayweb.com/2017/12/04/设计模式/设计模式之构建模式Builder/</id>
    <published>2017-12-04T07:00:22.000Z</published>
    <updated>2017-12-07T10:51:19.786Z</updated>
    
    <content type="html"><![CDATA[<p>构建与实现（样式、表示）分离，一个构建逻辑对应不同的实现（样式、表示）。</p><a id="more"></a><p>代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartC</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product1</span> :</span> <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part A of the Product1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part B of the Product1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part C of the Product1"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product2</span>:</span> <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part A of the Product2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part B of the Product2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">buildePartC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"build part C of the Product2"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;构建与实现（样式、表示）分离，一个构建逻辑对应不同的实现（样式、表示）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.itrayweb.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
